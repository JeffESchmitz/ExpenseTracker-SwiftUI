name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ios-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: macos-15            # pin a macOS that carries Xcode 16.x
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.x
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2.0'   # or '16.2' or '16.*'

      - name: Show Xcode / SDK info
        run: |
          xcode-select -p
          xcodebuild -version
          xcodebuild -showsdks

      - name: Resolve simulator destination (auto-pick)
        id: dest
        shell: bash
        run: |
          python3 - <<'PY' >> $GITHUB_ENV
          import json, subprocess, re
          data=json.loads(subprocess.check_output(
              ["xcrun","simctl","list","devices","--json"]
          ))
          candidates=[]
          for runtime, devices in data.get("devices", {}).items():
              if "iOS" not in runtime:
                  continue
              m=re.search(r'iOS-(\d+)-(\d+)', runtime)  # e.g. "com.apple.CoreSimulator.SimRuntime.iOS-17-5"
              if not m: 
                  continue
              major, minor = int(m.group(1)), int(m.group(2))
              for d in devices:
                  if not d.get("isAvailable"):
                      continue
                  if d["name"] in ("iPhone 15 Pro", "iPhone 15"):
                      candidates.append((major, minor, d["name"]))
          if not candidates:
              print("DEST=")  # fallback; xcodebuild will error with showdestinations info
              raise SystemExit(1)
          # Prefer highest OS, then 15 Pro
          candidates.sort(reverse=True, key=lambda t: (t[0], t[1], 1 if t[2]=="iPhone 15 Pro" else 0))
          major, minor, name = candidates[0]
          print(f"DEST=platform=iOS Simulator,name={name},OS={major}.{minor}")
          PY
          echo "Selected destination: $DEST"

      - name: Build & Test (with result bundle)
        if: ${{ env.DEST != '' }}
        id: test
        timeout-minutes: 20
        shell: bash
        run: |
          set -o pipefail
          rm -rf build || true
          xcodebuild \
            -project ExpenseTracker.xcodeproj \
            -scheme ExpenseTracker \
            -sdk iphonesimulator \
            -destination "$DEST" \
            -configuration Debug \
            -enableCodeCoverage YES \
            -resultBundlePath build/ExpenseTracker.xcresult \
            test | tee build/xcodebuild.log
          echo "result_bundle=build/ExpenseTracker.xcresult" >> $GITHUB_OUTPUT

      - name: Upload result bundle & logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcresult-and-logs
          path: |
            build/ExpenseTracker.xcresult
            build/xcodebuild.log
          retention-days: 7
          if-no-files-found: warn

      - name: Clean up simulators
        if: always()
        run: |
          xcrun simctl shutdown all || true
          pkill -9 -f Simulator || true